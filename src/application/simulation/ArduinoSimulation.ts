import { Config } from "../Config.js";
import { ModuleBase } from "../modules/ModuleBase.js";
import { StopableCallchain } from "../utils/StopableCallchain.js";
import { Arduino } from "./Arduino.js";
import { Environment } from "../Environment.js";
import { attachInfileSVG } from "../utils/SVGUtil.js";
import { SystemError } from "../errorSystem/Error.js";

export class ArduinoSimulation{

    // Element that holds the preview-svg-html-object
    private preview?: SVGElement;

    // Contains a list with all led-items from the preview (This exists for performance reasons)
    private leds: HTMLElement[] = [];

    // Callchain
    private callchain = new StopableCallchain();

    /**
     * Event: When an light-update get's pushed from the modules
     * @param lightUpdates string-array with the led-indexes and their new colors. These colors are directly inserted as css, so they can be anythin from rgb(...) over hsl(...) to normal hex values (RRGGBB).
     */
    private onPushLeds(lightUpdates: string[]){
        // Iterates over every update
        for(var updateId in lightUpdates){
            // Gets the update object
            var update = lightUpdates[updateId];

            // Iterates over every light
            for(var led of this.leds){
                var id = led.getAttribute("led");

                // Checks if the led-index doesn't match
                if(id !== updateId)
                    continue;
                    
                // Updates the style
                led.style.fill=update;
            }
        }
    }

    /**
     * Clears the led's on the svg and resets them to black
     */
    private clearLeds(){
        this.leds.forEach(led=>led.style.fill="black");
    }


    /**
     * Attaches the preview to an element.
     * @param {HTMLElement} preview the element where the preview shall be shown. Inside this element and svg will be inserted with the review for the led's
     * 
     * @throws {SystemError} if there is a critical error
     */
    public async attachToPreview(preview: HTMLElement){
        // Retrieves the svg-image for the led's and appends it
        this.preview = await attachInfileSVG(preview,"../resources/LedCanvas.svg");

        // Gets all leds
        this.leds = Array.from(this.preview.querySelectorAll("[led]")) as HTMLElement[];

        // Ensures that the leds could be loaded
        if(this.leds.length <= 0)
            throw new SystemError("No leds could be found.");
    }

    /**
     * Starts the simulation by running the given config
     * @param config config-object that got generated by blockly.
     */
    public startSimulation(env: Environment, config: [ModuleBase, Config][]){
        // Stops the current simulation 
        this.stopSimulation();

        // Creates the arduino
        var arduino = new Arduino(this.onPushLeds.bind(this));

        // Prepares the modules and invokes their setup-methods.

        // Converts the config to the modules and executes the simulated setup
        var modObjects = config.map(cfg=>{
            // Creates the mod-object
            var modObj = {
                mod: cfg[0],
                config: cfg[1],
                ssot: {}
            }

            // Executes the setup
            modObj.mod.simulateSetup(env,modObj.config,modObj.ssot,arduino);

            return modObj;
        });

        // Starts the arduin-simulation-loop
        this.callchain.startChain(async(delay)=>{
            // Inits the arduino
            arduino.__init(delay);

            while(true){
                for(var obj of modObjects)
                    await obj.mod.simulateLoop(env,obj.ssot,arduino);
                
                // Default delay to prevent infinitely fast loops
                await delay(1000);
            }
        });

    }

    /**
     * Stops the simulation if it was been running
     */
    public stopSimulation(){
        this.callchain.stop();
        this.clearLeds();
    }

    // Returns how many leds got found
    public getLedAmount(){
        return this.leds.length;
    }

}